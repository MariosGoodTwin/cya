#!/bin/bash
# Usage: $0 <directory_to_backup> <duplicity backup arguments>
#
# Same as duplicity, but records ACLs, and xattrs, and is intelligent about not
# storing hard-linked files.
#
# Stores the extra metadata in .dupext directory in root of the backup.
#

set -e

[[ $# -le 1 ]] && { cat <<-EOF
	Duplicity driver that records ACLs and XATTRs, and apropriately handles hardlinks

	Usage: $(basename "$0") <source_dir> [duplicity_arguments]
EOF
	exit -1
}

# Source directory must be the first argument
SRC_DIR="$1"

# Metadata will be stored in a hidden directory in $SRC_DIR, and cached in
# $CACHE_DIR, but staged to $DUPEXT_TMP first
DUPEXT_DIR="${SRC_DIR%/}/.dupext"
DUPEXT_TMP="$(mktemp -d -t dupext.XXXXXXX)"
HASH=( $(echo "$@" | md5sum) )
CACHE_BASE="${HOME%/}/.cache/duplicity-ex"
CACHE_DIR="$CACHE_BASE/$HASH"

atexit() { for DIR in "$DUPEXT_DIR" "$DUPEXT_TMP"; do [[ -f "$DIR/.dupext" ]] && rm -rf "$DIR"; done; }
trap atexit EXIT

mkdir -p "$DUPEXT_DIR" && : >> $DUPEXT_DIR/.dupext
mkdir -p "$DUPEXT_TMP" && : >> $DUPEXT_TMP/.dupext
mkdir -p "$CACHE_DIR"
chmod 700 "$CACHE_BASE"
echo "duplicity-ex: metadata directory: $DUPEXT_DIR"
echo "duplicity-ex: metadata staging directory: $DUPEXT_TMP"
echo "duplicity-ex: metadata cache dir: $CACHE_DIR"

# Copy restore scripts to $DUPEXT_TMP
SCRIPTS_DIR=$(dirname "${BASH_SOURCE[0]}")/restore-scripts
for FN in 'restore-hard-links' 'restore-acl' 'restore-attr'; do
	cp -a "$SCRIPTS_DIR/$FN" $DUPEXT_TMP
done

# Extract all excludes from the command line (--exclude EXCL, --exclude=EXCL)
ARGS=("$@")
EXCLUDE=( "$DUPEXT_DIR" )
for i in ${!ARGS[*]}; do
	ARG="${ARGS[i]}"
	[[ $ARG == --exclude=* ]] && EXCLUDE+=("${ARG:10}")
	[[ $ARG == --exclude ]]   && { (( i++ )); EXCLUDE+=("${ARGS[i]}"); }

	[[ $ARG == --exclude-filelist=* ]] && { EXCLUDE+=( $(cat "${ARG:19}") ); }
	[[ $ARG == --exclude-filelist ]]   && { (( i++ )); EXCLUDE+=( $(cat "${ARGS[i]}") ); }
done
echo "duplicity-ex: excluding: ${EXCLUDE[@]}"

# construct 'find' exclusions
FINDARGS=("-not" "-path" "$SRC_DIR")
for E in "${EXCLUDE[@]}"; do FINDARGS+=(-not \( -path "$E" -prune \)); done
##echo FINDARGS: "${FINDARGS[@]}"



# Backup only one path for each multiply linked file (exclude others)
find "${SRC_DIR[@]}" "${FINDARGS[@]}" -not -type d -links +1 -printf '%i %n %P\0' | sort -s -n -z -k 1,1 | tee "$DUPEXT_TMP/hardlinks.txtz" |
while read -d $'\0' LINE; do
	ARR=($LINE)
	[[ $ARR == $i0 ]] && { printf "%s\0" "${SRC_DIR%/}/${LINE#$ARR ${ARR[1]} }"; } || { i0="$ARR"; }
done > "$DUPEXT_TMP/exclude.txtz"

# Store acls and xattrs (the weirdness with cd-s is to make getfacl/attr output paths relative to $SRC_DIR)
WD=$(pwd)
find_all() { (cd "$WD" && find "$SRC_DIR" "${FINDARGS[@]}" -not -type s -not -type l -printf "%P\\0"); }

echo -n "duplicity-ex: scanning for acls... "
(cd "$SRC_DIR" && find_all | xargs -0 getfacl --numeric --skip-base) > "$DUPEXT_TMP/acl.txt"
echo "done."

echo -n "duplicity-ex: scanning for xattrs... "
(cd "$SRC_DIR" && find_all | xargs -0 getfattr -h -m . -d)           > "$DUPEXT_TMP/attr.txt"
echo "done."

# Cache metadata in ~/.cache/duplicity-ex, updating only files that changed

for PTH in "$DUPEXT_TMP"/*; do
	FN=$(basename "$PTH")
	cmp -s "$PTH" "$CACHE_DIR/$FN" || { echo "duplicity-ex: $FN changed."; cp -a "$PTH" "$CACHE_DIR"; }
	cp -a "$CACHE_DIR/$FN" "$DUPEXT_DIR"
done

# Run duplicity
duplicity --null-separator --exclude-filelist "$DUPEXT_DIR/exclude.txtz" "$@"
