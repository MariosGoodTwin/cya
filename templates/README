Unattended automated backup
===========================

cya is designed to make backing up multiple hosts to a single archive server
secure and (relatively) easy.  It needs one account on the archive server
(named 'archive'), where the backups will be uploaded from the backup hosts
('targets').

A cya-archiver managed unattended backups run as follows:

On the archive server:

	1) cya-archiver is called daily by cron on the archive server, with
	   one parameter -- $ROOT -- the root of the backup set directory.

	2) it checks if $ROOT/incoming/finished directory exists. If yes,
	   that means a new backup has been uploaded.

	3)  If so, it uses the information from $ROOT/next_info to hardlink
	   the backup files to apropriate backup sets in $ROOT/backups. 
	   Once done, it removes the 'finished' directory, and creates
	   $ROOT/incomin/next, into which it hardlinks the apropriate backup
	   set (based on current time).  It stores which backup set has been
	   hardlinked to $ROOT/next_info.

On the target host:

	1) /etc/opt/backup script is run daily by cron. It checks if
	   $ROOT/incoming/next exists on the archive server. If not, it
	   exists (this means that cya-archiver hasn't ran yet and moved the
	   old backup to its right place).

	2) Otherwise, it runs duplicity, uploading the result to
	   $ROOT/incoming/next

	3) Once backup has finished, $ROOT/incoming/next is moved to
	   $ROOT/incoming/finished, signaling to cya-archiver that a new
	   backup is ready.

Cookbook: Setting up cya on 'archive' and 'target' hosts
========================================================

NOTE: When adding any of these to be executed by cron, make sure to wrap it
in something that prevents the command being executed more than once at a
time (e.g., a flock call: 'flock /var/run/cya-backup /etc/cya/backup').

- on the archive host:
	* install cya in /opt/cya
	* install duplicity 0.6.20 or higher

	* create user named 'archive'
	* add public keys of target hosts to archive's authorized_keys

	* create /etc/cya/run based on archive/etc_cya
	* add to /etc/cya/run to crontab, to be run daily

- on each target host
	* install cya to /opt/cya

	* create /etc/cya based on target/etc_cya
	* customize /etc/cya/backup script for your backup
	* create ssh keys in /etc/cya/keys and add the public key to the
	  archive's host 'archive' user

	* add /etc/cya/backup to crontab

Security model
==============

Definitions:

* archive: the host which holds the backups
* target: a host being backed up
* $ROOT: base directory of backup sets on archive
* Committed backup files: files residing in $ROOT/backups
* Uncommited backup files: files residing in $ROOT/incoming/finished


Design summary:

Target host attempts to back itself up daily to archive:$ROOT/incoming/next
directory, if that directory exists. When it succeeds, it renames that
directory to 'finished'.

The archive host periodically checks for existence of
archive:$ROOT/incoming/finished. If it exists, it


Design consequences:

* If archive@archive is breached, no committed backup files can be accessed.
  Uncommitted backup files can be accessed, read, deleted, but not decrypted.

* If root@archive is breached all backup files can be accessed, read,
  deleted, but not decrypted.

* If root@target is breached, no committed backups on the archive can be
  accessed.  Uncommitted backup files can be accessed, read, deleted, and
  decrypted.

* If both root@archive and root@target are breached, the backups can be
  read, deleted and decrypted (full compromise).
